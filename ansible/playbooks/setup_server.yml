---

- hosts: webservers

  vars:
    user: dhc-user

  user: "{{ user }}"
  sudo: True

  tasks:
    - name: add nginx ppa
      action: apt_repository repo=ppa:nginx/stable state=present

    - name: install common packages needed for python application development
      action: apt pkg=$item state=installed
      with_items:
        - libpq-dev
        - libfreetype6
        - libfreetype6-dev
        - zlib1g-dev
        - python-dev
        - python-setuptools
        - python-psycopg2
        - git-core
        - nginx

    - name: install pip
      action: easy_install name=pip

    - name: install various libraries with pip
      action: pip name=$item state=present
      with_items:
        - virtualenv
        - supervisor
        - uwsgi

    - name: remove default nginx site
      action: file path=/etc/nginx/sites-enabled/default state=absent

    - name: write nginx.conf
      action: template src=templates/nginx.conf dest=/etc/nginx/nginx.conf

    - name: create supervisord config folder
      action: file dest=/etc/supervisor state=directory owner=root

    - name: create supervisord config
      action: template src=templates/supervisord.conf dest=/etc/supervisord.conf

    - name: create supervisord init script
      action: template src=templates/supervisord.sh dest=/etc/init.d/supervisord mode=0755

    - name: start supervisord service and have it run during system startup
      action: service name=supervisord state=started enabled=yes

    - name: create clone directory
      action: file dest=/opt/web state=directory owner={{ user }} group={{ user }}

- hosts: database

  user: dhc-user
  sudo: True

  tasks:
    - name: ensure packages are installed
      action: apt name={{ item }}
      with_items:
          - postgresql
          - libpq-dev
          - python-psycopg2

- hosts: database

  user: dhc-user
  sudo: True
  sudo_user: postgres

  vars_files:
    - prod.yml

  tasks:
    - name: ensure database is created
      postgresql_db: name={{ dbname }}

    - name: ensure user has access to database
      postgresql_user: db={{ dbname }} name={{ dbuser }} password={{ dbpassword }} priv=ALL

    - name: ensure user does not have unnecessary privilege
      postgresql_user: name={{ dbuser }} role_attr_flags=NOSUPERUSER,NOCREATEDB

    - name: update postgres client configuration
      action: template src=templates/pg_hba.conf dest=/etc/postgresql/9.3/main/pg_hba.conf
      notify:
        - restart postgresql

    - name: bind to private address
      lineinfile:
          dest=/etc/postgresql/9.3/main/postgresql.conf
          regexp='^listen_addresses'
          line="listen_addresses = '${ansible_default_ipv4.address}'"
          state=present

  handlers:
    - name: restart postgresql
      service: name=postgresql state=restarted
