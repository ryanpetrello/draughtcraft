---

- hosts: webservers
  user: dhc-user
  sudo: True

  vars:
    app_name: draughtcraft
    repo_url: https://github.com/ryanpetrello/draughtcraft.git
    repo_remote: origin
    repo_version: master
    webapps_dir: /opt/web
    wsgi_file: ansible/wsgi.py
    wsgi_callable: app

  vars_files:
    - prod.yml

  tasks:
    - name: ensure log directory
      action: file dest=${webapps_dir}/${app_name}/log state=directory

    - name: deploy code from repository
      action: git repo=$repo_url dest=${webapps_dir}/${app_name}/src remote=$repo_remote version=$repo_version

    - name: Enforce permissions on cached CSS
      action: file path=${webapps_dir}/${app_name}/src/css mode=0750

    - name: Enforce permissions on cached JS
      action: file path=${webapps_dir}/${app_name}/src/js mode=0750

    - name: install dependencies into virtualenv
      action: pip requirements=${webapps_dir}/${app_name}/src/ansible/requirements.txt virtualenv=${webapps_dir}/${app_name}/venv state=present

    - name: install the package itself
      action: pip name=${webapps_dir}/${app_name}/src virtualenv=${webapps_dir}/${app_name}/venv state=present

    - name: configure the app
      action: template src=templates/production.py dest=${webapps_dir}/${app_name}/src

    - name: initialize (and migrate) the database
      command: ${webapps_dir}/${app_name}/venv/bin/pecan populate production.py chdir=${webapps_dir}/${app_name}/src

    - name: delete file-system-cached static css
      command: rm -f ${webapps_dir}/${app_name}/src/public/css/*COMBINED*

    - name: delete file-system-cached static js
      command: rm -f ${webapps_dir}/${app_name}/src/public/js/*COMBINED*

    - name: upload CDN resources to DHO
      command: ${webapps_dir}/${app_name}/venv/bin/pecan cdn-upload ${dho_key} ${dho_secret} ${dho_bucket} chdir=${webapps_dir}/${app_name}/src

    - name: create supervisor program config
      action: template src=templates/supervisor.ini dest=/etc/supervisor/${app_name}.ini
      notify:
        - restart app

    - name: restart supervisord service to detect the new app
      action: service name=supervisord state=restarted

    - name: create nginx site config
      action: template src=templates/nginx_site.conf dest=/etc/nginx/sites-available/${app_name}.conf
      notify:
        - restart nginx

    - name: link nginx config
      action: file src=/etc/nginx/sites-available/${app_name}.conf dest=/etc/nginx/sites-enabled/${app_name}.conf state=link

    - name: start app
      action: supervisorctl name=${app_name} state=started

  handlers:
    - name: restart app
      action: supervisorctl name=${app_name} state=restarted

    - name: restart nginx
      action: service name=nginx state=restarted
